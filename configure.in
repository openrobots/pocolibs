dnl autoconf script for portLib/comLib (aka pocolibs)
dnl
dnl Copyright (c) 2003 CNRS/LAAS
dnl
dnl GPL, since some parts were copied from other configure.in
dnl 
dnl $LAAS$
dnl
AC_INIT(src/comLib/csLib.c)
AC_PREREQ(2.13)

AC_CANONICAL_HOST

AC_PROG_CC

PACKAGE=pocolibs
VERSION=2.0
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_REVISION($LAAS$)

if test $host_os = darwin; then
	AC_DEFINE(__DARWIN__)
fi

AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

dnl add -ldl if needed 
if test -n $lt_cv_dlopen_libs ; then
	LIBS=$lt_cv_dlopen_libs
fi

AC_PROG_INSTALL

dnl check for mkdep
AC_PATH_PROG(MKDEP, mkdep, no, $prefix/bin:$exec_prefix/bin:$PATH)

dnl check for purify
opt_purify=no
AC_ARG_WITH(purify, [  --with-purify           configure to postprocess with pur
ify], opt_purify=$withval)
if test "$opt_purify" = yes; then
  AC_MSG_RESULT([enabling purify])
  PURIFY="purify"
else
  PURIFY=
fi

dnl processor tests 
AC_C_BIGENDIAN

dnl
AC_TYPE_SIGNAL

dnl

# AC_CHECK_PTHREADS(action if ok, action if not ok, action if cross-compiling)
AC_DEFUN([AC_CHECK_PTHREADS],
	AC_LANG_SAVE
	AC_LANG_C
	AC_TRY_RUN([
#include <pthread.h>
void *pipo(void *a) {   exit(0); }
 
int main() {
    pthread_t t;
    pthread_create(&t, NULL, pipo, NULL);
    pthread_join(t, NULL);
    exit(2);
}
	],[$1],[$2],:)
	AC_LANG_RESTORE
)

		
AC_CACHE_CHECK(
	[if compiler recognizes -pthread],
	poco_cv_gcc_pthread,
	ac_save_CFLAGS=$CFLAGS
	CFLAGS="$CFLAGS -pthread"
	AC_CHECK_PTHREADS(
		poco_cv_gcc_pthread=yes, 
		poco_cv_gcc_pthread=no
	)
	CFLAGS=$ac_save_CFLAGS
)
if test $poco_cv_gcc_pthread = yes; then
	poco_threads=""
	CFLAGS="$CFLAGS -pthread"
else
	AC_CACHE_CHECK(
		[if compiler recognizes -mt],
		poco_cv_cc_mt,
		ac_save_CFLAGS=$CFLAGS
		CFLAGS="$CFLAGS -mt"
		AC_CHECK_PTHREADS(
			poco_cv_cc_mt=yes,
			poco_cv_cc_mt=no
		)
		CFLAGS=$ac_save_CFLAGS
	)
	if test $poco_cv_cc_mt = yes; then
		CFLAGS="$CFLAGS -mt";
		LDFLAGS="$LDFLAGS -mt";
	else
		AC_CHECK_LIB(pthread,pthread_create,poco_threads=-lpthread,
        	     [AC_CHECK_LIB(c_r,pthread_create,poco_threads=-lc_r)])
		ac_save_LIBS="$LIBS"
		if test -n "$poco_threads" ; then
			LIBS="$poco_threads $LIBS"
		fi
		AC_CHECK_PTHREADS([
			:
		],[
			AC_MSG_ERROR([No working thread support found (fatal)])
			exit 2
		])
	fi
fi


AC_SEARCH_LIBS([fabs], [m])

dnl AC_CHECK_LIB([pthread], pthread_create, 
dnl 	have_libpthread=yes, 
dnl 	AC_CHECK_LIB([c_r], pthread_create,
dnl 		have_libc_r=yes))
dnl if test "$have_libpthread" != "yes" -a "$have_libc_r" != "yes"; then
dnl 	AC_MSG_ERROR([POSIX threads library not found])
dnl fi

dnl AC_SEARCH_LIBS([pthread_create], [pthread c_r])

AC_SEARCH_LIBS([timer_create], [rt])

dnl AC_CHECK_LIB([rt], timer_create, have_librt=yes, have_librt=no)

dnl if test "$have_librt" = yes; then
dnl   LIBS=-lrt
dnl fi

AC_MSG_CHECKING([for posix timers])
AC_TRY_LINK([#include <time.h>], 
	[timer_create(CLOCK_REALTIME, NULL, NULL);],
	[AC_MSG_RESULT([yes])]
	[AC_DEFINE(HAVE_POSIX_TIMERS)],
	[AC_MSG_RESULT([no])]
)

AC_CHECK_FUNCS(gethostbyname, [], [
	  AC_CHECK_LIB(nsl, gethostbyname)
	])
AC_CHECK_LIB(socket, socket)

AC_MSG_CHECKING([for vfscanf])
AC_TRY_LINK([#include <stdio.h>],
	[vfscanf(NULL, NULL, NULL);],
	[AC_MSG_RESULT([yes])]
	[AC_DEFINE(HAVE_VFSCANF)],
	[AC_MSG_RESULT([no])]
)

AC_CONFIG_HEADER(src/config.h)
AC_OUTPUT(Init.make
	Makefile
	include/Makefile
	src/portLib/Makefile
	src/errorLib/Makefile
	src/errorLib/h2addErrno
	src/comLib/Makefile
	src/posterLib/Makefile
	src/posterLib/posterServ/Makefile
	src/h2/Makefile
	src/shell/Makefile
)

