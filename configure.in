dnl autoconf script for portLib/comLib (aka pocolibs)
dnl
dnl Copyright (c) 2004 
dnl      Autonomous Systems Lab, Swiss Federal Institute of Technology.
dnl Copyright (c) 2003-2004 CNRS/LAAS
dnl
dnl GPL, since some parts were copied from other configure.in
dnl 
dnl $LAAS$
dnl
AC_INIT(src/comLib/csLib.c)
AC_PREREQ(2.13)

AC_CANONICAL_HOST

AC_PROG_CC
if test "x${GCC}" = "xyes"; then
  CFLAGS="${CFLAGS} -Wall"
fi

PACKAGE=pocolibs
VERSION=2.0
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_REVISION($LAAS$)

AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

dnl --- OS flavour checks -----------------------------------------------

dnl RTAI support

# AC_CHECK_RTAI_INCLUDES(var, path)
AC_DEFUN([AC_CHECK_RTAI_INCLUDES],
[
   AC_MSG_CHECKING([for RTAI includes])
   AC_CACHE_VAL(ac_cv_path_rtai,
    [
       IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
        ac_tmppath="$2:/usr/realtime/include:/usr/src/rtai/include"
        for ac_dir in $ac_tmppath; do 
            test -z "$ac_dir" && ac_dir=.
            if eval test -f $ac_dir/rtai.h; then
               eval ac_cv_path_rtai="$ac_dir"
               break
            fi
       done
       IFS="$ac_save_ifs"
    ])
   $1="$ac_cv_path_rtai"
   if test -n "[$]$1"; then
      AC_MSG_RESULT([$]$1)
   else
      AC_MSG_ERROR([cannot find RTAI includes], 2)
   fi
   AC_SUBST($1)
])

# configure options
AC_ARG_WITH(rtai,
           AC_HELP_STRING([--with-rtai=yes|no],
               [configure to use RTAI]),
           [opt_rtai=$withval],[opt_rtai=no])
AC_ARG_WITH(rtai-includes,
           AC_HELP_STRING([--with-rtai-includes=DIR],
               [RTAI headers are in DIR]),
           [opt_rtai_includes=$withval])

# make related stuff
if test "x$opt_rtai" = "xyes"; then
   OSAPI=rtai
   AC_MSG_RESULT([Configuring to use RTAI])
   AC_CHECK_RTAI_INCLUDES(RTAI_INCLUDES, $opt_rtai_includes)

elif test "x$opt_rtai" = "xno"; then :
   OSAPI=posix
   AC_MSG_RESULT([Configuring to use POSIX])
else
   AC_MSG_ERROR([invalid option --with-rtai=$opt_rtai], 2)
fi
AC_SUBST(OSAPI)

dnl --- end of OS flavour checks ----------------------------------------

dnl add -ldl if needed 
if test -n $lt_cv_dlopen_libs ; then
	LIBS=$lt_cv_dlopen_libs
fi

AC_PROG_INSTALL

dnl check for mkdep
AC_PATH_PROG(MKDEP, mkdep, no, $prefix/bin:$exec_prefix/bin:$PATH)

dnl check for rpcgen
AC_ARG_VAR(RPCGEN, [Remote Procedure Call (RPC) protocol compiler])
AC_PATH_PROG(RPCGEN, rpcgen, no, [$PATH])
AC_RPCGEN_C

dnl check for purify
opt_purify=no
AC_ARG_WITH(purify, [  --with-purify           configure to postprocess with purify], opt_purify=$withval)
if test "x$opt_purify" = xyes; then
  AC_MSG_RESULT([enabling purify])
  PURIFY="purify"
else
  PURIFY=
fi
AC_SUBST(PURIFY)

dnl processor tests 
AC_C_BIGENDIAN

dnl
AC_TYPE_SIGNAL


dnl --- check for X -----------------------------------------------------

AC_PATH_X
if test "x$x_includes" = "xNONE"; then
   HAS_X=no
   XCPPFLAGS=
   XLDFLAGS=
else
   HAS_X=yes
   if test "x$x_includes" = "x"; then
      XCPPFLAGS=
      XLDFLAGS=
   else
      XCPPFLAGS=-I$x_includes
      XLDFLAGS=-L$x_libraries
   fi
fi
AC_SUBST(HAS_X XCPPFLAGS XLDFLAGS)

dnl --- end of checks for X ---------------------------------------------


dnl --- check for pthread -----------------------------------------------

# AC_CHECK_PTHREADS(action if ok, action if not ok, action if cross-compiling)
AC_DEFUN([AC_CHECK_PTHREADS],
	AC_LANG_SAVE
	AC_LANG_C
	AC_TRY_RUN([
#include <pthread.h>
void *pipo(void *a) { exit(0); }
 
int main() {
    pthread_t t;
    pthread_create(&t, NULL, pipo, NULL);
    pthread_join(t, NULL);
    exit(2);
}
	],[$1],[$2],:)
	AC_LANG_RESTORE
)

AC_CACHE_CHECK(
	[if compiler recognizes -pthread],
	poco_cv_gcc_pthread,
	ac_save_CFLAGS=$CFLAGS
	CFLAGS="$CFLAGS -pthread"
	AC_CHECK_PTHREADS(
		poco_cv_gcc_pthread=yes, 
		poco_cv_gcc_pthread=no
	)
	CFLAGS=$ac_save_CFLAGS
)
if test "$poco_cv_gcc_pthread" = "yes"; then
	poco_threads=""
	CFLAGS="$CFLAGS -pthread"
	LDFLAGS="$LDFLAGS -pthread";
else
	AC_CACHE_CHECK(
		[if compiler recognizes -mt],
		poco_cv_cc_mt,
		ac_save_CFLAGS=$CFLAGS
		CFLAGS="$CFLAGS -mt"
		AC_CHECK_PTHREADS(
			poco_cv_cc_mt=yes,
			poco_cv_cc_mt=no
		)
		CFLAGS=$ac_save_CFLAGS
	)
	if test "$poco_cv_cc_mt" = "yes"; then
		CFLAGS="$CFLAGS -mt";
		LDFLAGS="$LDFLAGS -mt";
	else
		AC_CHECK_LIB(pthread,pthread_create,poco_threads=-lpthread,
        	     [AC_CHECK_LIB(c_r,pthread_create,poco_threads=-lc_r)])
		ac_save_LIBS="$LIBS"
		if test -n "$poco_threads" ; then
			LIBS="$poco_threads $LIBS"
		fi
		AC_CHECK_PTHREADS([
			:
		],[
			AC_MSG_ERROR([No working thread support found (fatal)])
			exit 2
		])
	fi
fi

dnl --- end of checks for pthread ---------------------------------------


AC_SEARCH_LIBS([fabs], [m])
AC_SEARCH_LIBS([atan], [m])

dnl AC_CHECK_LIB([pthread], pthread_create, 
dnl 	have_libpthread=yes, 
dnl 	AC_CHECK_LIB([c_r], pthread_create,
dnl 		have_libc_r=yes))
dnl if test "$have_libpthread" != "yes" -a "$have_libc_r" != "yes"; then
dnl 	AC_MSG_ERROR([POSIX threads library not found])
dnl fi

dnl AC_SEARCH_LIBS([pthread_create], [pthread c_r])

AC_SEARCH_LIBS([timer_create], [rt])

dnl AC_CHECK_LIB([rt], timer_create, have_librt=yes, have_librt=no)

dnl if test "$have_librt" = yes; then
dnl   LIBS=-lrt
dnl fi

AC_MSG_CHECKING([for posix timers])
AC_TRY_LINK([#include <time.h>], 
	[timer_create(CLOCK_REALTIME, NULL, NULL);],
	[AC_MSG_RESULT([yes])]
	[AC_DEFINE(HAVE_POSIX_TIMERS)],
	[AC_MSG_RESULT([no])]
)

AC_MSG_CHECKING([for pthread_attr_setschedpolicy])
AC_TRY_LINK([#include <pthread.h>], 
	[pthread_attr_setschedpolicy(NULL, SCHED_RR);],
	[AC_MSG_RESULT([yes])]
	[AC_DEFINE(HAVE_SETSCHEDPOLICY)],
	[AC_MSG_RESULT([no])]
)

AC_CHECK_FUNCS(gethostbyname, [], [
	  AC_CHECK_LIB(nsl, gethostbyname)
	])
AC_CHECK_LIB(socket, socket)

AC_MSG_CHECKING([for vfscanf])
AC_TRY_LINK([#include <stdio.h>],
	[vfscanf(NULL, NULL, NULL);],
	[AC_MSG_RESULT([yes])]
	[AC_DEFINE(HAVE_VFSCANF)],
	[AC_MSG_RESULT([no])]
)

AC_CHECK_FUNCS([fnmatch],[], [
	COMLIB_COMPATSRC="${COMLIB_COMPATSRC} fnmatch.c"
])
AC_SUBST(COMLIB_COMPATSRC)


dnl --- Debugging options -----------------------------------------------

AC_ARG_WITH(debug,
           AC_HELP_STRING([--with-debug=all task h2dev smmem h2evn mbox gcom],
               [print debugging information at run-time]),
           [opt_debug=$withval],[opt_debug=])

if test "x$opt_debug" = "xall"; then
   opt_debug="task h2dev smmem h2evn mbox gcom"
fi
for dopt in "$opt_debug"; do 
	test -z "$dopt" && break

	case "$dopt" in
	   task)	AC_DEFINE(PORTLIB_DEBUG_TASKLIB) ;;

	   h2dev)	AC_DEFINE(COMLIB_DEBUG_H2DEVLIB) ;;
	   smmem)	AC_DEFINE(COMLIB_DEBUG_SMMEMLIB) ;;
	   h2evn)	AC_DEFINE(COMLIB_DEBUG_H2EVNLIB) ;;
	   mbox)	AC_DEFINE(COMLIB_DEBUG_MBOXLIB) ;;
	   gcom)	AC_DEFINE(COMLIB_DEBUG_GCOMLIB) ;;

	esac
done


dnl --- Make makefiles --------------------------------------------------

AC_CONFIG_HEADER(src/pocolibs-config.h)
AC_OUTPUT(Init.make
	Makefile
	include/Makefile
	src/portLib/Makefile
	src/errorLib/Makefile
	src/errorLib/h2addErrno
	src/comLib/Makefile
	src/posterLib/Makefile
	src/posterLib/posterServ/Makefile
	src/h2/Makefile
	src/shell/Makefile
	src/xes/Makefile
	src/regress/Makefile
)

