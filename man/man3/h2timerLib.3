.\" Copyright (c) 1999-2005 CNRS/LAAS
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd January 21, 2005
.Dt h2timerLib 3
.Os pocoLibs
.Sh NAME 
.Nm h2timerLib
.Nd pocoLibs timers manipulation library
.Sh SYNOPSIS
.Fd "#include <portLib.h>"
.Fd "#include <h2timerLib.h>"
.Ft STATUS
.Fn h2timerInit void
.Ft STATUS
.Fn h2timerEnd void
.Ft H2TIMER_ID
.Fn h2timerAlloc void
.Ft STATUS
.Fn h2timerStart "H2TIMER_ID timerId" "int period" "int delay"
.Ft STATUS
.Fn h2timerPause "H2TIMER_ID timerId"
.Ft STATUS
.Fn h2timerPauseReset "H2TIMER_ID timerId"
.Ft STATUS
.Fn h2timerStop "H2TIMER_ID timerId"
.Ft STATUS
.Fn h2timerChangePeriod "H2TIMER_ID timerId" "int period"
.Ft STATUS
.Fn h2timerFree "H2TIMER_ID timerId"
.Sh DESCRIPTION
.Fn h2timerInit
initializes the timer component of 
.Nm pocolibs. This function is normally called by the global
initialization function
.Xr h2initGlob 3 .
.Pp
.Fn h2timerEnd
cleans up the timer library and frees the resources used.
.Pp
.Fn h2timerAlloc
allocates a new inactive timer. 
.Fn h2timerStart
arms a timer that will trigger after 
.Fa delay
ticks and then every
.Fa period 
ticks per second.
.Fa period
must be a multiple or a integer divisor of 
.Fa delay 
for implementation reasons. 
.Pp
.Fn h2timerPause
blocks the current task until the next expiration of the timer
specified  by
.Fa timerId . 
This function will not block if it was not called enough times in the
past to ensure that all expirations of the timer have been waited on.
.Pp
.Fn h2timerPauseReset
first flushes the synchronisation semaphore used by the timer and
waits for the next expiration of the timer. This ensures that the task
will at least yield the processor before returning. 
.Pp
.Fn h2timerStop
stops the given timer. No more events will be generated by this
timer. Calling 
.Fn h2timerPause
on a stopped timer has a undefined behaviour.
.Pp
.Fn h2timerChangePeriod
changes the 
.Fa period
of a running timer.
.Pp
.Fn h2timerFree
frees a timer and returns it to the timer pool of pocoLibs. If it was
running, it is first stopped. 
.Sh RETURN VALUES
.Fn h2timerAlloc
returns the identifier of the newly allocated timer or 
.Dv NULL
in case of an error.
.Pp
.Fn other functions return 
.Dv OK
or
.Dv ERROR
in case of an error and set the task's errno value.
.Sh ERRORS
.Bl -tag -width .Er
.It Bq Er S_h2timerLib_TIMER_NOT_INIT
the timer library has not been initialized. 
.It Bq Er S_h2timerLib_TOO_MUCH_TIMERS
no free timer was available in 
.Fn h2timerAlloc .
.It Bq Er S_h2timerLib_NOT_STOPPED_TIMER
The specified timer to 
.Fn h2timerStart
is already running.
.It Bq Er S_h2timerLib_BAD_PERIOD
The specified period is not a multiple or a divisor of the delay of
the timer. 
.It Bq Er S_h2timerLib_STOPPED_TIMER
The specified timer is not running for 
.Fn h2timerChangePeriod .
.El
.Sh SEE ALSO
.Xr sysLib 3 ,
.Xr taskLib 3 ,
.Xr wdLib 3 .
